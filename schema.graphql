# Entity that represents the RocketPool protocol and its various child entities. (Will eventually also hold Node related entities)
type RocketPoolProtocol @entity {
  # The name of the RocketPOOL protocol.
  id: ID! 

  # All stakers (addresses holding rETH) associated with the RocketPool protocol.
  stakers: [Staker!]!

  # Last known staker network balance checkpoint.
  lastNetworkStakerBalanceCheckPoint: NetworkStakerBalanceCheckpoint

  # All nodes that are registered with the RocketPool protocol.
  nodes: [Node!]!

  # All timezones associated with registered nodes.
  nodeTimezones: [NetworkNodeTimezone!]!

  # Last known RPL reward interval.
  lastRPLRewardInterval: RPLRewardInterval

  # Last known node network balance checkpoint.
  lastNetworkNodeBalanceCheckPoint: NetworkNodeBalanceCheckpoint
}

# A Staker on RocketPool is an address that is/was associated with an rETH balance.
type Staker @entity {
  # Address that holds rETH.
  id: ID! 

  # Current rETH balance in WEI.
  rETHBalance: BigInt!

  # Current ETH balance in WEI.
  ethBalance: BigInt!

  # Total ETH rewards (in WEI) accrued during the lifecycle of the staker. 
  totalETHRewards: BigInt!

  # Indicates if this staker has accrued ETH rewards at some point in time during its lifetime.
  hasAccruedETHRewardsDuringLifecycle: Boolean!

  # The last known staker balance checkpoint for this staker.
  lastBalanceCheckpoint: StakerBalanceCheckpoint

  # Block number at which this staker first received rETH.
  block: BigInt!

  # Block timestamp at which this staker first received rETH.
  blockTime: BigInt!
}

# Entity tracking the mint, burn and transfers of rETH. Minting and burning will occur to/from the rETH contract address.
type RocketETHTransaction @entity {
  # Composite key based on transaction hash of the triggered event and its log index.
  id: ID!

  # The address that was the original owner of the rETH.
  from: Staker!

  # The rETH amount (in WEI) being transferred.
  amount: BigInt!

  # The address that was the recipient of the rETH.
  to: Staker!

  # The block number of this transaction.
  block: BigInt!

  # The block timestamp of this transaction.
  blockTime: BigInt!

  # The transaction hash.
  transactionHash: Bytes!
}

# Represents a checkpoint at which the RocketPool protocol kept track of all staker related balances.
type NetworkStakerBalanceCheckpoint @entity {
  # Composite key based on transaction hash of the triggered event and its log index.
  id: ID!

  # Id to the the previous checkpoint.
  previousCheckpointId: String

  # Id to the the next checkpoint.
  nextCheckpointId: String

  # Staker ETH (in WEI) balance (initial deposit + (ETH network rewards - average node fee)) on the beacon chain at this checkpoint. 
  stakerETHActivelyStaking: BigInt!
  
  # Staker ETH (in WEI) waiting in the deposit pool at this checkpoint.
  stakerETHWaitingInDepositPool: BigInt!
 
  # Staker ETH (in WEI) in the RocketETH contract at this checkpoint.
  stakerETHInRocketETHContract: BigInt!

  # Staker ETH (in WEI) in RocketPool at this checkpoint.
  stakerETHInProtocol: BigInt!

  # Staker ETH rewards (+/-) (in WEI) for all staker balance checkpoints up to this checkpoint.
  totalStakerETHRewards: BigInt!

  # Stakers that have had ETH rewards (+/-) up to this checkpoint.
  totalStakersWithETHRewards: BigInt!

  # Average staker ETH rewards (+/-) (in WEI) up to this checkpoint.
  averageStakerETHRewards: BigInt!

  # Total unique stakers that have an rETH balance (in WEI) greater than 0 at this checkpoint.
  stakersWithAnRETHBalance: BigInt!

  # Total rETH supply at this checkpoint.
  totalRETHSupply: BigInt!

  # Exchange rate of ETH:rETH (in WEI) at this checkpoint.
  rETHExchangeRate: BigInt!

  # Block Number of this checkpoint.
  block: BigInt!

  # Block Timestamp of this checkpoint.
  blockTime: BigInt!
}

# Represents a checkpoint at which the RocketPool protocol kept track of a balance for a specific staker.
type StakerBalanceCheckpoint @entity {
  # Composite key consisting of the NetworkBalanceCheckpoint ID and the Staker ID.
  id: ID!

  # Staker that is associated with this balance checkpoint.
  stakerId: String!

  # The network staker balance checkpoint that triggered the creation of this reward.
  networkStakerBalanceCheckpointId: String!

  # ETH balance (in WEI) of the staker of this checkpoint.
  ethBalance: BigInt!

  # rETH balance (in WEI) of the staker of this checkpoint.
  rETHBalance: BigInt!

  # Total ETH rewards (in WEI) up to this checkpoint.
  totalETHRewards: BigInt!

  # Block Number of this checkpoint.
  block: BigInt!

  # Block Timestamp of this checkpoint.
  blockTime: BigInt!
}

# Entity representing a node on RocketPool.
type Node @entity {
  # Address that is associated with a node on RocketPool.
  id: ID! 

  # Current timezone for this node.
  timezone: NetworkNodeTimezone!

  # Current RPL staked.
  rplStaked: BigInt!

  # Current effective RPL staked
  effectiveRPLStaked: BigInt!

  # Total RPL slashed since this node was registered with RocketPool.
  totalRPLSlashed: BigInt!

  # Total claimed RPL rewards since this node was registered with RocketPool.
  totalClaimedRPLRewards: BigInt!

  # Current minimum RPL needed to collateralize all the queued and staking minipools of this node by the bare minimum.
  minimumRPLNeededForMinipools: BigInt!

  # Current maximum RPL needed to collateralize all the queued and staking minipools of this node to the absolute maximum.
  maximumRPLNeededForMinipools: BigInt!

  # Current queueud minipools
  queuedMinipools: BigInt!

  # Current staking minipools
  stakingMinipools: BigInt!

  # Current unbonded staking minipools
  stakingUnbondedMinipools: BigInt!

  # Current withdrawable minipools.
  withdrawableMinipools: BigInt!

  # Finalized minipools since this node was registered with RocketPool.
  totalFinalizedMinipools: BigInt!

  # Average minipool fee for this node operator.
  averageFeeForActiveMinipools: BigInt!
 
  # Last node balance checkpoint for this node.
  lastNodeBalanceCheckpoint: NodeBalanceCheckpoint

  # Associated minipools for this node.
  minipools: [Minipool!]!

  # Block number at which this node was first registered with the protocol.
  block: BigInt!

  # Block timestamp at which this node was first registered with the protocol.
  blockTime: BigInt!
}

# Represents what kind of RPL Stake transactions can occur.
enum NodeRPLStakeTransactionType {
  Staked
  Withdrawal
  Slashed
}

# Entity representing an RPL stake transactions that has occured.
type NodeRPLStakeTransaction @entity {
  # Composite key based on transaction hash of the triggered event and its log index.
  id: ID!

  # Total number of nodes registered with this timezone.
  node: Node!

  # The total RPL amount that concerns this transaction.
  amount: BigInt!
  
  # The total ETH equivalent at the time of this transaction.
  ethAmount: BigInt!

  # The type of RPL stake transaction.
  type: NodeRPLStakeTransactionType!

  # Block Number - On what block number did this transaction occur.
  block: BigInt!

  # Block Timestamp - At what time did this transaction occur.
  blockTime: BigInt!
}

# Entity representing an RPL Reward interval on the protocol.
type RPLRewardInterval @entity {
  # Composite key based on transaction hash of the triggered event and its log index.
  id: ID!

  # ID to the previous.
  previousIntervalId: String

  # ID to the next interval.
  nextIntervalId: String

  # The total rewards that are claimable for this interval. This is the total from minted inflation and unclaimed from previous interval(s).
  claimableRewards: BigInt!

  # The total rewards claimed during this interval.
  totalRPLClaimed: BigInt!

  # The total RPL reward that were given out in this interval.
  rplRewardClaims: [RPLRewardClaim!]!

  # Indicates if this interval is still active.
  isClosed: Boolean!

  # When did this interval start?
  intervalStartTime: BigInt!

  # When did this interval end?
  intervalClosedTime: BigInt

  # How long is/was this interval meant to last?
  intervalDuration: BigInt!

  # What was the actual interval length?
  intervalDurationActual: BigInt

  # On what block number was this entity created.
  block: BigInt!

  # At what time was this entity created.
  blockTime: BigInt!
}

# Represents the RPL reward claimer options.
enum RPLRewardClaimerType {
  PDAO
  TrustedNode
  Node
}

# Entity representing an RPL reward that has been handed out by the protocol.
type RPLRewardClaim @entity {
  # Composite key based on transaction hash of the triggered event and its log index.
  id: ID!

  # The claimer of this reward.
  claimer: String!

  # The type of the claimer.
  claimerType: RPLRewardClaimerType!

  # The total RPL amount of this reward.
  amount: BigInt!
  
  # The total ETH equivalent (in WEI) at the time of this reward.
  ethAmount: BigInt!

  # Block Number - On what block number was this reward claimed.
  block: BigInt!

  # Block Timestamp - At what time was this reward claimed.
  blockTime: BigInt!
}

# Entity representing the network timezones and the associated registered node(s).
type NetworkNodeTimezone @entity {
  # Timezone name (string)
  id: ID!

  # Total number of nodes registered with this timezone.
  totalRegisteredNodes: BigInt!

  # Block Number - On what block number was this timezone first registered.
  block: BigInt!

  # Block Timestamp - At what time was this timezone first registered.
  blockTime: BigInt!
}

# Entity representing the network balance checkpoint for all nodes.
type NetworkNodeBalanceCheckpoint @entity {
  # Composite key based on transaction hash of the triggered event and its log index.
  id: ID! 

  # Id to the the previous checkpoint.
  previousCheckpointId: String

  # Id to the the next checkpoint.
  nextCheckpointId: String

  # Total number of registered RocketPool nodes at this checkpoint.
  nodesRegistered: BigInt!

  # RPL staked accross all nodes at this checkpoint.
  rplStaked: BigInt!

  # Effective RPL staked accross all nodes at this checkpoint.
  effectiveRPLStaked: BigInt!

  # Total RPL slashed from all previous checkpoints up to this checkpoint.
  totalRPLSlashed: BigInt!

  # Total Claimed RPL rewards from all previous checkpoints up to this checkpoint.
  totalClaimedRPLRewards: BigInt!

  # Minimum RPL needed to start a new minipool at this checkpoint.
  minimumRPLNeededForNewMinipool: BigInt!

  # Maximum RPL needed to start a new minipool at this checkpoint.
  maximumRPLNeededForNewMinipool: BigInt!

  # Minimum RPL needed to collateralize the entire protocol by the absolute minimum at this checkpoint.
  minimumRPLNeededForQueuedOrStakingMinipools: BigInt!

  # maximum RPL needed to collateralize the entire protocol to the absolute maximum at this checkpoint.
  maximumRPLNeededForQueuedOrStakingMinipools: BigInt!

  # The RPL price in ETH at this checkpoint.
  rplPriceInETH: BigInt!

  # Current queued minipools accross all nodes at this checkpoint.
  queuedMinipools: BigInt!

  # Current staking minipools accross all nodes at this checkpoint.
  stakingMinipools: BigInt!

  # Current unbonded staking minipools accross all nodes at this checkpoint.
  stakingUnbondedMinipools: BigInt!

  # Withdrawable minipools accross all nodes at this checkpoint.
  withdrawableMinipools: BigInt!

  # Total finalized minipools accross all nodes up to this checkpoint.
  totalFinalizedMinipools: BigInt!

  # Average minipool fee accross all nodes and the eligible (queued, staking, withdrawable) minipools at this checkpoint.
  averageFeeForActiveMinipools: BigInt!

  # Fee to start a new minipool at this checkpoint.
  newMinipoolFee: BigInt!

  # Block number that was associated with this checkpoint.
  block: BigInt!

  # Block timestamp that was associated with this checkpoint.
  blockTime: BigInt!
}

# Entity representing a balance checkpoint for a node.
type NodeBalanceCheckpoint @entity {
  # Composite key consisting of the NetworkNodeBalanceCheckpoint ID and the Node ID.
  id: ID! 

  # Node that is associated with this balance checkpoint.
  Node: Node! 

  # Network node balance checkpoint associated with this checkpoint.
  NetworkNodeBalanceCheckpoint: NetworkNodeBalanceCheckpoint!

  # RPL staked at this checkpoint.
  rplStaked: BigInt!

  # Effective RPL staked at this checkpoint.
  effectiveRPLStaked: BigInt!

  # Total RPL slashed from all previous checkpoints up to this checkpoint.
  totalRPLSlashed: BigInt!

  # Total Claimed RPL rewards from all previous checkpoints up to this checkpoint.
  totalClaimedRPLRewards: BigInt!

  # Minimum RPL needed to collateralize all the queued and staking minipools of the node by the bare minimum at this checkpoint.
  minimumRPLNeededForMinipools: BigInt!

  # Maximum RPL needed to collateralize all the queued and staking minipools of the node by the absolute maximum at this checkpoint.
  maximumRPLNeededForMinipools: BigInt!

  # Queued minipools for this node at this checkpoint.
  queuedMinipools: BigInt!

  # Staking minipools for this node at this checkpoint.
  stakingMinipools: BigInt!

  # Unbonded staking minipools for this node at this checkpoint.
  stakingUnbondedMinipools: BigInt!

  # Withdrawable minipools accross for this node at this checkpoint.
  withdrawableMinipools: BigInt!

  # Total Finalized minipools for this node up to this checkpoint.
  totalFinalizedMinipools: BigInt!

  # Average minipool fee for this node and the eligible (queued, staking, withdrawable) minipools at this checkpoint.
  averageFeeForActiveMinipools: BigInt!

  # Block number that was associated with this checkpoint.
  block: BigInt!

  # Block timestamp that was associated with this checkpoint.
  blockTime: BigInt!
}

# Entity representing a minipool for a node.
type Minipool @entity {
  # Address of the minipool
  id: ID! 

  # Node that is associated with this minipool
  node: Node!

  # Fee that is associated with this minipool
  fee: BigInt! 

  # Block timestamp that was associated with the creation of this minipool.
  queuedBlockTime: BigInt!

  # Block timestamp that was associated with the dequeue of the minipool that will (most of the time) lead to staking.
  dequeuedBlockTime: BigInt!

  # Block timestamp that was associated with the destruction of this minipool.
  destroyedBlockTime: BigInt!

  # Block number that was associated with this minipool transitioning to the staking state.
  stakingBlockTime: BigInt!

  # Block timestamp that was associated with this minipool being marked as withdrawable.
  withdrawableBlockTime: BigInt!

  # Block timestamp that was associated with this minipool being marked as finalized.
  finalizedBlockTime: BigInt!
}