// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RocketPoolProtocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RocketPoolProtocol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RocketPoolProtocol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RocketPoolProtocol", id.toString(), this);
  }

  static load(id: string): RocketPoolProtocol | null {
    return store.get("RocketPoolProtocol", id) as RocketPoolProtocol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakers(): Array<string> {
    let value = this.get("stakers");
    return value.toStringArray();
  }

  set stakers(value: Array<string>) {
    this.set("stakers", Value.fromStringArray(value));
  }

  get lastNetworkStakerBalanceCheckPoint(): string | null {
    let value = this.get("lastNetworkStakerBalanceCheckPoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastNetworkStakerBalanceCheckPoint(value: string | null) {
    if (value === null) {
      this.unset("lastNetworkStakerBalanceCheckPoint");
    } else {
      this.set(
        "lastNetworkStakerBalanceCheckPoint",
        Value.fromString(value as string)
      );
    }
  }

  get nodes(): Array<string> {
    let value = this.get("nodes");
    return value.toStringArray();
  }

  set nodes(value: Array<string>) {
    this.set("nodes", Value.fromStringArray(value));
  }

  get nodeTimezones(): Array<string> {
    let value = this.get("nodeTimezones");
    return value.toStringArray();
  }

  set nodeTimezones(value: Array<string>) {
    this.set("nodeTimezones", Value.fromStringArray(value));
  }

  get lastRPLRewardInterval(): string | null {
    let value = this.get("lastRPLRewardInterval");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastRPLRewardInterval(value: string | null) {
    if (value === null) {
      this.unset("lastRPLRewardInterval");
    } else {
      this.set("lastRPLRewardInterval", Value.fromString(value as string));
    }
  }

  get lastNetworkNodeBalanceCheckPoint(): string | null {
    let value = this.get("lastNetworkNodeBalanceCheckPoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastNetworkNodeBalanceCheckPoint(value: string | null) {
    if (value === null) {
      this.unset("lastNetworkNodeBalanceCheckPoint");
    } else {
      this.set(
        "lastNetworkNodeBalanceCheckPoint",
        Value.fromString(value as string)
      );
    }
  }
}

export class Staker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Staker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Staker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Staker", id.toString(), this);
  }

  static load(id: string): Staker | null {
    return store.get("Staker", id) as Staker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rETHBalance(): BigInt {
    let value = this.get("rETHBalance");
    return value.toBigInt();
  }

  set rETHBalance(value: BigInt) {
    this.set("rETHBalance", Value.fromBigInt(value));
  }

  get ethBalance(): BigInt {
    let value = this.get("ethBalance");
    return value.toBigInt();
  }

  set ethBalance(value: BigInt) {
    this.set("ethBalance", Value.fromBigInt(value));
  }

  get totalETHRewards(): BigInt {
    let value = this.get("totalETHRewards");
    return value.toBigInt();
  }

  set totalETHRewards(value: BigInt) {
    this.set("totalETHRewards", Value.fromBigInt(value));
  }

  get hasAccruedETHRewardsDuringLifecycle(): boolean {
    let value = this.get("hasAccruedETHRewardsDuringLifecycle");
    return value.toBoolean();
  }

  set hasAccruedETHRewardsDuringLifecycle(value: boolean) {
    this.set("hasAccruedETHRewardsDuringLifecycle", Value.fromBoolean(value));
  }

  get lastBalanceCheckpoint(): string | null {
    let value = this.get("lastBalanceCheckpoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastBalanceCheckpoint(value: string | null) {
    if (value === null) {
      this.unset("lastBalanceCheckpoint");
    } else {
      this.set("lastBalanceCheckpoint", Value.fromString(value as string));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class RocketETHTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RocketETHTransaction entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RocketETHTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RocketETHTransaction", id.toString(), this);
  }

  static load(id: string): RocketETHTransaction | null {
    return store.get("RocketETHTransaction", id) as RocketETHTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class NetworkStakerBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NetworkStakerBalanceCheckpoint entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NetworkStakerBalanceCheckpoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NetworkStakerBalanceCheckpoint", id.toString(), this);
  }

  static load(id: string): NetworkStakerBalanceCheckpoint | null {
    return store.get(
      "NetworkStakerBalanceCheckpoint",
      id
    ) as NetworkStakerBalanceCheckpoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousCheckpointId(): string | null {
    let value = this.get("previousCheckpointId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previousCheckpointId(value: string | null) {
    if (value === null) {
      this.unset("previousCheckpointId");
    } else {
      this.set("previousCheckpointId", Value.fromString(value as string));
    }
  }

  get nextCheckpointId(): string | null {
    let value = this.get("nextCheckpointId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nextCheckpointId(value: string | null) {
    if (value === null) {
      this.unset("nextCheckpointId");
    } else {
      this.set("nextCheckpointId", Value.fromString(value as string));
    }
  }

  get stakerETHActivelyStaking(): BigInt {
    let value = this.get("stakerETHActivelyStaking");
    return value.toBigInt();
  }

  set stakerETHActivelyStaking(value: BigInt) {
    this.set("stakerETHActivelyStaking", Value.fromBigInt(value));
  }

  get stakerETHWaitingInDepositPool(): BigInt {
    let value = this.get("stakerETHWaitingInDepositPool");
    return value.toBigInt();
  }

  set stakerETHWaitingInDepositPool(value: BigInt) {
    this.set("stakerETHWaitingInDepositPool", Value.fromBigInt(value));
  }

  get stakerETHInRocketETHContract(): BigInt {
    let value = this.get("stakerETHInRocketETHContract");
    return value.toBigInt();
  }

  set stakerETHInRocketETHContract(value: BigInt) {
    this.set("stakerETHInRocketETHContract", Value.fromBigInt(value));
  }

  get stakerETHInProtocol(): BigInt {
    let value = this.get("stakerETHInProtocol");
    return value.toBigInt();
  }

  set stakerETHInProtocol(value: BigInt) {
    this.set("stakerETHInProtocol", Value.fromBigInt(value));
  }

  get totalStakerETHRewards(): BigInt {
    let value = this.get("totalStakerETHRewards");
    return value.toBigInt();
  }

  set totalStakerETHRewards(value: BigInt) {
    this.set("totalStakerETHRewards", Value.fromBigInt(value));
  }

  get totalStakersWithETHRewards(): BigInt {
    let value = this.get("totalStakersWithETHRewards");
    return value.toBigInt();
  }

  set totalStakersWithETHRewards(value: BigInt) {
    this.set("totalStakersWithETHRewards", Value.fromBigInt(value));
  }

  get averageStakerETHRewards(): BigInt {
    let value = this.get("averageStakerETHRewards");
    return value.toBigInt();
  }

  set averageStakerETHRewards(value: BigInt) {
    this.set("averageStakerETHRewards", Value.fromBigInt(value));
  }

  get stakersWithAnRETHBalance(): BigInt {
    let value = this.get("stakersWithAnRETHBalance");
    return value.toBigInt();
  }

  set stakersWithAnRETHBalance(value: BigInt) {
    this.set("stakersWithAnRETHBalance", Value.fromBigInt(value));
  }

  get totalRETHSupply(): BigInt {
    let value = this.get("totalRETHSupply");
    return value.toBigInt();
  }

  set totalRETHSupply(value: BigInt) {
    this.set("totalRETHSupply", Value.fromBigInt(value));
  }

  get rETHExchangeRate(): BigInt {
    let value = this.get("rETHExchangeRate");
    return value.toBigInt();
  }

  set rETHExchangeRate(value: BigInt) {
    this.set("rETHExchangeRate", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class StakerBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakerBalanceCheckpoint entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakerBalanceCheckpoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakerBalanceCheckpoint", id.toString(), this);
  }

  static load(id: string): StakerBalanceCheckpoint | null {
    return store.get(
      "StakerBalanceCheckpoint",
      id
    ) as StakerBalanceCheckpoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakerId(): string {
    let value = this.get("stakerId");
    return value.toString();
  }

  set stakerId(value: string) {
    this.set("stakerId", Value.fromString(value));
  }

  get networkStakerBalanceCheckpointId(): string {
    let value = this.get("networkStakerBalanceCheckpointId");
    return value.toString();
  }

  set networkStakerBalanceCheckpointId(value: string) {
    this.set("networkStakerBalanceCheckpointId", Value.fromString(value));
  }

  get ethBalance(): BigInt {
    let value = this.get("ethBalance");
    return value.toBigInt();
  }

  set ethBalance(value: BigInt) {
    this.set("ethBalance", Value.fromBigInt(value));
  }

  get rETHBalance(): BigInt {
    let value = this.get("rETHBalance");
    return value.toBigInt();
  }

  set rETHBalance(value: BigInt) {
    this.set("rETHBalance", Value.fromBigInt(value));
  }

  get totalETHRewards(): BigInt {
    let value = this.get("totalETHRewards");
    return value.toBigInt();
  }

  set totalETHRewards(value: BigInt) {
    this.set("totalETHRewards", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class Node extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Node entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Node entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Node", id.toString(), this);
  }

  static load(id: string): Node | null {
    return store.get("Node", id) as Node | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timezone(): string {
    let value = this.get("timezone");
    return value.toString();
  }

  set timezone(value: string) {
    this.set("timezone", Value.fromString(value));
  }

  get rplStaked(): BigInt {
    let value = this.get("rplStaked");
    return value.toBigInt();
  }

  set rplStaked(value: BigInt) {
    this.set("rplStaked", Value.fromBigInt(value));
  }

  get effectiveRPLStaked(): BigInt {
    let value = this.get("effectiveRPLStaked");
    return value.toBigInt();
  }

  set effectiveRPLStaked(value: BigInt) {
    this.set("effectiveRPLStaked", Value.fromBigInt(value));
  }

  get totalRPLSlashed(): BigInt {
    let value = this.get("totalRPLSlashed");
    return value.toBigInt();
  }

  set totalRPLSlashed(value: BigInt) {
    this.set("totalRPLSlashed", Value.fromBigInt(value));
  }

  get totalClaimedRPLRewards(): BigInt {
    let value = this.get("totalClaimedRPLRewards");
    return value.toBigInt();
  }

  set totalClaimedRPLRewards(value: BigInt) {
    this.set("totalClaimedRPLRewards", Value.fromBigInt(value));
  }

  get minimumEffectiveRPL(): BigInt {
    let value = this.get("minimumEffectiveRPL");
    return value.toBigInt();
  }

  set minimumEffectiveRPL(value: BigInt) {
    this.set("minimumEffectiveRPL", Value.fromBigInt(value));
  }

  get maximumEffectiveRPL(): BigInt {
    let value = this.get("maximumEffectiveRPL");
    return value.toBigInt();
  }

  set maximumEffectiveRPL(value: BigInt) {
    this.set("maximumEffectiveRPL", Value.fromBigInt(value));
  }

  get queuedMinipools(): BigInt {
    let value = this.get("queuedMinipools");
    return value.toBigInt();
  }

  set queuedMinipools(value: BigInt) {
    this.set("queuedMinipools", Value.fromBigInt(value));
  }

  get stakingMinipools(): BigInt {
    let value = this.get("stakingMinipools");
    return value.toBigInt();
  }

  set stakingMinipools(value: BigInt) {
    this.set("stakingMinipools", Value.fromBigInt(value));
  }

  get stakingUnbondedMinipools(): BigInt {
    let value = this.get("stakingUnbondedMinipools");
    return value.toBigInt();
  }

  set stakingUnbondedMinipools(value: BigInt) {
    this.set("stakingUnbondedMinipools", Value.fromBigInt(value));
  }

  get withdrawableMinipools(): BigInt {
    let value = this.get("withdrawableMinipools");
    return value.toBigInt();
  }

  set withdrawableMinipools(value: BigInt) {
    this.set("withdrawableMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedMinipools(): BigInt {
    let value = this.get("totalFinalizedMinipools");
    return value.toBigInt();
  }

  set totalFinalizedMinipools(value: BigInt) {
    this.set("totalFinalizedMinipools", Value.fromBigInt(value));
  }

  get averageFeeForActiveMinipools(): BigInt {
    let value = this.get("averageFeeForActiveMinipools");
    return value.toBigInt();
  }

  set averageFeeForActiveMinipools(value: BigInt) {
    this.set("averageFeeForActiveMinipools", Value.fromBigInt(value));
  }

  get lastNodeBalanceCheckpoint(): string | null {
    let value = this.get("lastNodeBalanceCheckpoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastNodeBalanceCheckpoint(value: string | null) {
    if (value === null) {
      this.unset("lastNodeBalanceCheckpoint");
    } else {
      this.set("lastNodeBalanceCheckpoint", Value.fromString(value as string));
    }
  }

  get minipools(): Array<string> {
    let value = this.get("minipools");
    return value.toStringArray();
  }

  set minipools(value: Array<string>) {
    this.set("minipools", Value.fromStringArray(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class NodeRPLStakeTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NodeRPLStakeTransaction entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NodeRPLStakeTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NodeRPLStakeTransaction", id.toString(), this);
  }

  static load(id: string): NodeRPLStakeTransaction | null {
    return store.get(
      "NodeRPLStakeTransaction",
      id
    ) as NodeRPLStakeTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get node(): string {
    let value = this.get("node");
    return value.toString();
  }

  set node(value: string) {
    this.set("node", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    return value.toBigInt();
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class RPLRewardInterval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RPLRewardInterval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RPLRewardInterval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RPLRewardInterval", id.toString(), this);
  }

  static load(id: string): RPLRewardInterval | null {
    return store.get("RPLRewardInterval", id) as RPLRewardInterval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousIntervalId(): string | null {
    let value = this.get("previousIntervalId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previousIntervalId(value: string | null) {
    if (value === null) {
      this.unset("previousIntervalId");
    } else {
      this.set("previousIntervalId", Value.fromString(value as string));
    }
  }

  get nextIntervalId(): string | null {
    let value = this.get("nextIntervalId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nextIntervalId(value: string | null) {
    if (value === null) {
      this.unset("nextIntervalId");
    } else {
      this.set("nextIntervalId", Value.fromString(value as string));
    }
  }

  get claimableRewards(): BigInt {
    let value = this.get("claimableRewards");
    return value.toBigInt();
  }

  set claimableRewards(value: BigInt) {
    this.set("claimableRewards", Value.fromBigInt(value));
  }

  get totalRPLClaimed(): BigInt {
    let value = this.get("totalRPLClaimed");
    return value.toBigInt();
  }

  set totalRPLClaimed(value: BigInt) {
    this.set("totalRPLClaimed", Value.fromBigInt(value));
  }

  get rplRewardClaims(): Array<string> {
    let value = this.get("rplRewardClaims");
    return value.toStringArray();
  }

  set rplRewardClaims(value: Array<string>) {
    this.set("rplRewardClaims", Value.fromStringArray(value));
  }

  get isClosed(): boolean {
    let value = this.get("isClosed");
    return value.toBoolean();
  }

  set isClosed(value: boolean) {
    this.set("isClosed", Value.fromBoolean(value));
  }

  get intervalStartTime(): BigInt {
    let value = this.get("intervalStartTime");
    return value.toBigInt();
  }

  set intervalStartTime(value: BigInt) {
    this.set("intervalStartTime", Value.fromBigInt(value));
  }

  get intervalClosedTime(): BigInt | null {
    let value = this.get("intervalClosedTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set intervalClosedTime(value: BigInt | null) {
    if (value === null) {
      this.unset("intervalClosedTime");
    } else {
      this.set("intervalClosedTime", Value.fromBigInt(value as BigInt));
    }
  }

  get intervalDuration(): BigInt {
    let value = this.get("intervalDuration");
    return value.toBigInt();
  }

  set intervalDuration(value: BigInt) {
    this.set("intervalDuration", Value.fromBigInt(value));
  }

  get intervalDurationActual(): BigInt | null {
    let value = this.get("intervalDurationActual");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set intervalDurationActual(value: BigInt | null) {
    if (value === null) {
      this.unset("intervalDurationActual");
    } else {
      this.set("intervalDurationActual", Value.fromBigInt(value as BigInt));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class RPLRewardClaim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RPLRewardClaim entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RPLRewardClaim entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RPLRewardClaim", id.toString(), this);
  }

  static load(id: string): RPLRewardClaim | null {
    return store.get("RPLRewardClaim", id) as RPLRewardClaim | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimer(): string {
    let value = this.get("claimer");
    return value.toString();
  }

  set claimer(value: string) {
    this.set("claimer", Value.fromString(value));
  }

  get claimerType(): string {
    let value = this.get("claimerType");
    return value.toString();
  }

  set claimerType(value: string) {
    this.set("claimerType", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    return value.toBigInt();
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class NetworkNodeTimezone extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NetworkNodeTimezone entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NetworkNodeTimezone entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NetworkNodeTimezone", id.toString(), this);
  }

  static load(id: string): NetworkNodeTimezone | null {
    return store.get("NetworkNodeTimezone", id) as NetworkNodeTimezone | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalRegisteredNodes(): BigInt {
    let value = this.get("totalRegisteredNodes");
    return value.toBigInt();
  }

  set totalRegisteredNodes(value: BigInt) {
    this.set("totalRegisteredNodes", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class NetworkNodeBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NetworkNodeBalanceCheckpoint entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NetworkNodeBalanceCheckpoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NetworkNodeBalanceCheckpoint", id.toString(), this);
  }

  static load(id: string): NetworkNodeBalanceCheckpoint | null {
    return store.get(
      "NetworkNodeBalanceCheckpoint",
      id
    ) as NetworkNodeBalanceCheckpoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousCheckpointId(): string | null {
    let value = this.get("previousCheckpointId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previousCheckpointId(value: string | null) {
    if (value === null) {
      this.unset("previousCheckpointId");
    } else {
      this.set("previousCheckpointId", Value.fromString(value as string));
    }
  }

  get nextCheckpointId(): string | null {
    let value = this.get("nextCheckpointId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nextCheckpointId(value: string | null) {
    if (value === null) {
      this.unset("nextCheckpointId");
    } else {
      this.set("nextCheckpointId", Value.fromString(value as string));
    }
  }

  get nodesRegistered(): BigInt {
    let value = this.get("nodesRegistered");
    return value.toBigInt();
  }

  set nodesRegistered(value: BigInt) {
    this.set("nodesRegistered", Value.fromBigInt(value));
  }

  get rplStaked(): BigInt {
    let value = this.get("rplStaked");
    return value.toBigInt();
  }

  set rplStaked(value: BigInt) {
    this.set("rplStaked", Value.fromBigInt(value));
  }

  get effectiveRPLStaked(): BigInt {
    let value = this.get("effectiveRPLStaked");
    return value.toBigInt();
  }

  set effectiveRPLStaked(value: BigInt) {
    this.set("effectiveRPLStaked", Value.fromBigInt(value));
  }

  get minimumEffectiveRPL(): BigInt {
    let value = this.get("minimumEffectiveRPL");
    return value.toBigInt();
  }

  set minimumEffectiveRPL(value: BigInt) {
    this.set("minimumEffectiveRPL", Value.fromBigInt(value));
  }

  get maximumEffectiveRPL(): BigInt {
    let value = this.get("maximumEffectiveRPL");
    return value.toBigInt();
  }

  set maximumEffectiveRPL(value: BigInt) {
    this.set("maximumEffectiveRPL", Value.fromBigInt(value));
  }

  get minimumEffectiveRPLNewMinipool(): BigInt {
    let value = this.get("minimumEffectiveRPLNewMinipool");
    return value.toBigInt();
  }

  set minimumEffectiveRPLNewMinipool(value: BigInt) {
    this.set("minimumEffectiveRPLNewMinipool", Value.fromBigInt(value));
  }

  get maximumEffectiveRPLNewMinipool(): BigInt {
    let value = this.get("maximumEffectiveRPLNewMinipool");
    return value.toBigInt();
  }

  set maximumEffectiveRPLNewMinipool(value: BigInt) {
    this.set("maximumEffectiveRPLNewMinipool", Value.fromBigInt(value));
  }

  get totalRPLSlashed(): BigInt {
    let value = this.get("totalRPLSlashed");
    return value.toBigInt();
  }

  set totalRPLSlashed(value: BigInt) {
    this.set("totalRPLSlashed", Value.fromBigInt(value));
  }

  get totalClaimedRPLRewards(): BigInt {
    let value = this.get("totalClaimedRPLRewards");
    return value.toBigInt();
  }

  set totalClaimedRPLRewards(value: BigInt) {
    this.set("totalClaimedRPLRewards", Value.fromBigInt(value));
  }

  get rplPriceInETH(): BigInt {
    let value = this.get("rplPriceInETH");
    return value.toBigInt();
  }

  set rplPriceInETH(value: BigInt) {
    this.set("rplPriceInETH", Value.fromBigInt(value));
  }

  get queuedMinipools(): BigInt {
    let value = this.get("queuedMinipools");
    return value.toBigInt();
  }

  set queuedMinipools(value: BigInt) {
    this.set("queuedMinipools", Value.fromBigInt(value));
  }

  get stakingMinipools(): BigInt {
    let value = this.get("stakingMinipools");
    return value.toBigInt();
  }

  set stakingMinipools(value: BigInt) {
    this.set("stakingMinipools", Value.fromBigInt(value));
  }

  get stakingUnbondedMinipools(): BigInt {
    let value = this.get("stakingUnbondedMinipools");
    return value.toBigInt();
  }

  set stakingUnbondedMinipools(value: BigInt) {
    this.set("stakingUnbondedMinipools", Value.fromBigInt(value));
  }

  get withdrawableMinipools(): BigInt {
    let value = this.get("withdrawableMinipools");
    return value.toBigInt();
  }

  set withdrawableMinipools(value: BigInt) {
    this.set("withdrawableMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedMinipools(): BigInt {
    let value = this.get("totalFinalizedMinipools");
    return value.toBigInt();
  }

  set totalFinalizedMinipools(value: BigInt) {
    this.set("totalFinalizedMinipools", Value.fromBigInt(value));
  }

  get averageFeeForActiveMinipools(): BigInt {
    let value = this.get("averageFeeForActiveMinipools");
    return value.toBigInt();
  }

  set averageFeeForActiveMinipools(value: BigInt) {
    this.set("averageFeeForActiveMinipools", Value.fromBigInt(value));
  }

  get newMinipoolFee(): BigInt {
    let value = this.get("newMinipoolFee");
    return value.toBigInt();
  }

  set newMinipoolFee(value: BigInt) {
    this.set("newMinipoolFee", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class NodeBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NodeBalanceCheckpoint entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NodeBalanceCheckpoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NodeBalanceCheckpoint", id.toString(), this);
  }

  static load(id: string): NodeBalanceCheckpoint | null {
    return store.get(
      "NodeBalanceCheckpoint",
      id
    ) as NodeBalanceCheckpoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Node(): string {
    let value = this.get("Node");
    return value.toString();
  }

  set Node(value: string) {
    this.set("Node", Value.fromString(value));
  }

  get NetworkNodeBalanceCheckpoint(): string {
    let value = this.get("NetworkNodeBalanceCheckpoint");
    return value.toString();
  }

  set NetworkNodeBalanceCheckpoint(value: string) {
    this.set("NetworkNodeBalanceCheckpoint", Value.fromString(value));
  }

  get rplStaked(): BigInt {
    let value = this.get("rplStaked");
    return value.toBigInt();
  }

  set rplStaked(value: BigInt) {
    this.set("rplStaked", Value.fromBigInt(value));
  }

  get effectiveRPLStaked(): BigInt {
    let value = this.get("effectiveRPLStaked");
    return value.toBigInt();
  }

  set effectiveRPLStaked(value: BigInt) {
    this.set("effectiveRPLStaked", Value.fromBigInt(value));
  }

  get minimumEffectiveRPL(): BigInt {
    let value = this.get("minimumEffectiveRPL");
    return value.toBigInt();
  }

  set minimumEffectiveRPL(value: BigInt) {
    this.set("minimumEffectiveRPL", Value.fromBigInt(value));
  }

  get maximumEffectiveRPL(): BigInt {
    let value = this.get("maximumEffectiveRPL");
    return value.toBigInt();
  }

  set maximumEffectiveRPL(value: BigInt) {
    this.set("maximumEffectiveRPL", Value.fromBigInt(value));
  }

  get totalRPLSlashed(): BigInt {
    let value = this.get("totalRPLSlashed");
    return value.toBigInt();
  }

  set totalRPLSlashed(value: BigInt) {
    this.set("totalRPLSlashed", Value.fromBigInt(value));
  }

  get totalClaimedRPLRewards(): BigInt {
    let value = this.get("totalClaimedRPLRewards");
    return value.toBigInt();
  }

  set totalClaimedRPLRewards(value: BigInt) {
    this.set("totalClaimedRPLRewards", Value.fromBigInt(value));
  }

  get queuedMinipools(): BigInt {
    let value = this.get("queuedMinipools");
    return value.toBigInt();
  }

  set queuedMinipools(value: BigInt) {
    this.set("queuedMinipools", Value.fromBigInt(value));
  }

  get stakingMinipools(): BigInt {
    let value = this.get("stakingMinipools");
    return value.toBigInt();
  }

  set stakingMinipools(value: BigInt) {
    this.set("stakingMinipools", Value.fromBigInt(value));
  }

  get stakingUnbondedMinipools(): BigInt {
    let value = this.get("stakingUnbondedMinipools");
    return value.toBigInt();
  }

  set stakingUnbondedMinipools(value: BigInt) {
    this.set("stakingUnbondedMinipools", Value.fromBigInt(value));
  }

  get withdrawableMinipools(): BigInt {
    let value = this.get("withdrawableMinipools");
    return value.toBigInt();
  }

  set withdrawableMinipools(value: BigInt) {
    this.set("withdrawableMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedMinipools(): BigInt {
    let value = this.get("totalFinalizedMinipools");
    return value.toBigInt();
  }

  set totalFinalizedMinipools(value: BigInt) {
    this.set("totalFinalizedMinipools", Value.fromBigInt(value));
  }

  get averageFeeForActiveMinipools(): BigInt {
    let value = this.get("averageFeeForActiveMinipools");
    return value.toBigInt();
  }

  set averageFeeForActiveMinipools(value: BigInt) {
    this.set("averageFeeForActiveMinipools", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class Minipool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Minipool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Minipool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Minipool", id.toString(), this);
  }

  static load(id: string): Minipool | null {
    return store.get("Minipool", id) as Minipool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get node(): string {
    let value = this.get("node");
    return value.toString();
  }

  set node(value: string) {
    this.set("node", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get queuedBlockTime(): BigInt {
    let value = this.get("queuedBlockTime");
    return value.toBigInt();
  }

  set queuedBlockTime(value: BigInt) {
    this.set("queuedBlockTime", Value.fromBigInt(value));
  }

  get dequeuedBlockTime(): BigInt {
    let value = this.get("dequeuedBlockTime");
    return value.toBigInt();
  }

  set dequeuedBlockTime(value: BigInt) {
    this.set("dequeuedBlockTime", Value.fromBigInt(value));
  }

  get destroyedBlockTime(): BigInt {
    let value = this.get("destroyedBlockTime");
    return value.toBigInt();
  }

  set destroyedBlockTime(value: BigInt) {
    this.set("destroyedBlockTime", Value.fromBigInt(value));
  }

  get stakingBlockTime(): BigInt {
    let value = this.get("stakingBlockTime");
    return value.toBigInt();
  }

  set stakingBlockTime(value: BigInt) {
    this.set("stakingBlockTime", Value.fromBigInt(value));
  }

  get withdrawableBlockTime(): BigInt {
    let value = this.get("withdrawableBlockTime");
    return value.toBigInt();
  }

  set withdrawableBlockTime(value: BigInt) {
    this.set("withdrawableBlockTime", Value.fromBigInt(value));
  }

  get finalizedBlockTime(): BigInt {
    let value = this.get("finalizedBlockTime");
    return value.toBigInt();
  }

  set finalizedBlockTime(value: BigInt) {
    this.set("finalizedBlockTime", Value.fromBigInt(value));
  }
}
