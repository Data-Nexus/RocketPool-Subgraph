// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RocketPoolProtocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RocketPoolProtocol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RocketPoolProtocol entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RocketPoolProtocol", id.toString(), this);
  }

  static load(id: string): RocketPoolProtocol | null {
    return store.get("RocketPoolProtocol", id) as RocketPoolProtocol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakers(): Array<string | null> {
    let value = this.get("stakers");
    return value.toStringArray();
  }

  set stakers(value: Array<string | null>) {
    this.set("stakers", Value.fromStringArray(value));
  }

  get lastNetworkStakerBalanceCheckPoint(): string | null {
    let value = this.get("lastNetworkStakerBalanceCheckPoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastNetworkStakerBalanceCheckPoint(value: string | null) {
    if (value === null) {
      this.unset("lastNetworkStakerBalanceCheckPoint");
    } else {
      this.set(
        "lastNetworkStakerBalanceCheckPoint",
        Value.fromString(value as string)
      );
    }
  }
}

export class Staker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Staker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Staker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Staker", id.toString(), this);
  }

  static load(id: string): Staker | null {
    return store.get("Staker", id) as Staker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rETHBalance(): BigInt {
    let value = this.get("rETHBalance");
    return value.toBigInt();
  }

  set rETHBalance(value: BigInt) {
    this.set("rETHBalance", Value.fromBigInt(value));
  }

  get ethBalance(): BigInt {
    let value = this.get("ethBalance");
    return value.toBigInt();
  }

  set ethBalance(value: BigInt) {
    this.set("ethBalance", Value.fromBigInt(value));
  }

  get totalETHRewards(): BigInt {
    let value = this.get("totalETHRewards");
    return value.toBigInt();
  }

  set totalETHRewards(value: BigInt) {
    this.set("totalETHRewards", Value.fromBigInt(value));
  }

  get lastBalanceCheckpoint(): string | null {
    let value = this.get("lastBalanceCheckpoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastBalanceCheckpoint(value: string | null) {
    if (value === null) {
      this.unset("lastBalanceCheckpoint");
    } else {
      this.set("lastBalanceCheckpoint", Value.fromString(value as string));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class RocketETHTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RocketETHTransaction entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RocketETHTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RocketETHTransaction", id.toString(), this);
  }

  static load(id: string): RocketETHTransaction | null {
    return store.get("RocketETHTransaction", id) as RocketETHTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class NetworkStakerBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save NetworkStakerBalanceCheckpoint entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NetworkStakerBalanceCheckpoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NetworkStakerBalanceCheckpoint", id.toString(), this);
  }

  static load(id: string): NetworkStakerBalanceCheckpoint | null {
    return store.get(
      "NetworkStakerBalanceCheckpoint",
      id
    ) as NetworkStakerBalanceCheckpoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalStakerETHActivelyStaking(): BigInt {
    let value = this.get("totalStakerETHActivelyStaking");
    return value.toBigInt();
  }

  set totalStakerETHActivelyStaking(value: BigInt) {
    this.set("totalStakerETHActivelyStaking", Value.fromBigInt(value));
  }

  get totalStakerETHWaitingInDepositPool(): BigInt {
    let value = this.get("totalStakerETHWaitingInDepositPool");
    return value.toBigInt();
  }

  set totalStakerETHWaitingInDepositPool(value: BigInt) {
    this.set("totalStakerETHWaitingInDepositPool", Value.fromBigInt(value));
  }

  get totalStakerETHInRocketEthContract(): BigInt {
    let value = this.get("totalStakerETHInRocketEthContract");
    return value.toBigInt();
  }

  set totalStakerETHInRocketEthContract(value: BigInt) {
    this.set("totalStakerETHInRocketEthContract", Value.fromBigInt(value));
  }

  get totalStakerETHInPendingOrExitedMinipools(): BigInt {
    let value = this.get("totalStakerETHInPendingOrExitedMinipools");
    return value.toBigInt();
  }

  set totalStakerETHInPendingOrExitedMinipools(value: BigInt) {
    this.set(
      "totalStakerETHInPendingOrExitedMinipools",
      Value.fromBigInt(value)
    );
  }

  get totalStakerETHInProtocol(): BigInt {
    let value = this.get("totalStakerETHInProtocol");
    return value.toBigInt();
  }

  set totalStakerETHInProtocol(value: BigInt) {
    this.set("totalStakerETHInProtocol", Value.fromBigInt(value));
  }

  get totalRETHSupply(): BigInt {
    let value = this.get("totalRETHSupply");
    return value.toBigInt();
  }

  set totalRETHSupply(value: BigInt) {
    this.set("totalRETHSupply", Value.fromBigInt(value));
  }

  get rETHExchangeRate(): BigInt {
    let value = this.get("rETHExchangeRate");
    return value.toBigInt();
  }

  set rETHExchangeRate(value: BigInt) {
    this.set("rETHExchangeRate", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class StakerBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakerBalanceCheckpoint entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakerBalanceCheckpoint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakerBalanceCheckpoint", id.toString(), this);
  }

  static load(id: string): StakerBalanceCheckpoint | null {
    return store.get(
      "StakerBalanceCheckpoint",
      id
    ) as StakerBalanceCheckpoint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): string {
    let value = this.get("staker");
    return value.toString();
  }

  set staker(value: string) {
    this.set("staker", Value.fromString(value));
  }

  get networkStakerBalanceCheckpoint(): string {
    let value = this.get("networkStakerBalanceCheckpoint");
    return value.toString();
  }

  set networkStakerBalanceCheckpoint(value: string) {
    this.set("networkStakerBalanceCheckpoint", Value.fromString(value));
  }

  get ethBalance(): BigInt {
    let value = this.get("ethBalance");
    return value.toBigInt();
  }

  set ethBalance(value: BigInt) {
    this.set("ethBalance", Value.fromBigInt(value));
  }

  get rETHBalance(): BigInt {
    let value = this.get("rETHBalance");
    return value.toBigInt();
  }

  set rETHBalance(value: BigInt) {
    this.set("rETHBalance", Value.fromBigInt(value));
  }

  get ethRewardsSincePreviousCheckpoint(): BigInt {
    let value = this.get("ethRewardsSincePreviousCheckpoint");
    return value.toBigInt();
  }

  set ethRewardsSincePreviousCheckpoint(value: BigInt) {
    this.set("ethRewardsSincePreviousCheckpoint", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}
