// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RocketPoolProtocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("stakers", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RocketPoolProtocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RocketPoolProtocol entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RocketPoolProtocol", id.toString(), this);
    }
  }

  static load(id: string): RocketPoolProtocol | null {
    return changetype<RocketPoolProtocol | null>(
      store.get("RocketPoolProtocol", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakers(): Array<string> {
    let value = this.get("stakers");
    return value!.toStringArray();
  }

  set stakers(value: Array<string>) {
    this.set("stakers", Value.fromStringArray(value));
  }

  get lastNetworkStakerBalanceCheckPoint(): string | null {
    let value = this.get("lastNetworkStakerBalanceCheckPoint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastNetworkStakerBalanceCheckPoint(value: string | null) {
    if (!value) {
      this.unset("lastNetworkStakerBalanceCheckPoint");
    } else {
      this.set(
        "lastNetworkStakerBalanceCheckPoint",
        Value.fromString(<string>value)
      );
    }
  }
}

export class Staker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rETHBalance", Value.fromBigInt(BigInt.zero()));
    this.set("ethBalance", Value.fromBigInt(BigInt.zero()));
    this.set("totalETHRewards", Value.fromBigInt(BigInt.zero()));
    this.set("hasAccruedETHRewardsDuringLifecycle", Value.fromBoolean(false));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Staker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Staker entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Staker", id.toString(), this);
    }
  }

  static load(id: string): Staker | null {
    return changetype<Staker | null>(store.get("Staker", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rETHBalance(): BigInt {
    let value = this.get("rETHBalance");
    return value!.toBigInt();
  }

  set rETHBalance(value: BigInt) {
    this.set("rETHBalance", Value.fromBigInt(value));
  }

  get ethBalance(): BigInt {
    let value = this.get("ethBalance");
    return value!.toBigInt();
  }

  set ethBalance(value: BigInt) {
    this.set("ethBalance", Value.fromBigInt(value));
  }

  get totalETHRewards(): BigInt {
    let value = this.get("totalETHRewards");
    return value!.toBigInt();
  }

  set totalETHRewards(value: BigInt) {
    this.set("totalETHRewards", Value.fromBigInt(value));
  }

  get hasAccruedETHRewardsDuringLifecycle(): boolean {
    let value = this.get("hasAccruedETHRewardsDuringLifecycle");
    return value!.toBoolean();
  }

  set hasAccruedETHRewardsDuringLifecycle(value: boolean) {
    this.set("hasAccruedETHRewardsDuringLifecycle", Value.fromBoolean(value));
  }

  get lastBalanceCheckpoint(): string | null {
    let value = this.get("lastBalanceCheckpoint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastBalanceCheckpoint(value: string | null) {
    if (!value) {
      this.unset("lastBalanceCheckpoint");
    } else {
      this.set("lastBalanceCheckpoint", Value.fromString(<string>value));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class RocketETHTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("to", Value.fromString(""));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RocketETHTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RocketETHTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RocketETHTransaction", id.toString(), this);
    }
  }

  static load(id: string): RocketETHTransaction | null {
    return changetype<RocketETHTransaction | null>(
      store.get("RocketETHTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class NetworkStakerBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalStakerETHActivelyStaking", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalStakerETHWaitingInDepositPool",
      Value.fromBigInt(BigInt.zero())
    );
    this.set(
      "totalStakerETHInRocketEthContract",
      Value.fromBigInt(BigInt.zero())
    );
    this.set(
      "totalStakerETHInPendingOrExitedMinipools",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("totalStakerETHInProtocol", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalStakerETHRewardsSincePreviousCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set(
      "totalStakerETHRewardsUpToThisCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("totalStakersWithAnRETHBalance", Value.fromBigInt(BigInt.zero()));
    this.set("totalRETHSupply", Value.fromBigInt(BigInt.zero()));
    this.set("rETHExchangeRate", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NetworkStakerBalanceCheckpoint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NetworkStakerBalanceCheckpoint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NetworkStakerBalanceCheckpoint", id.toString(), this);
    }
  }

  static load(id: string): NetworkStakerBalanceCheckpoint | null {
    return changetype<NetworkStakerBalanceCheckpoint | null>(
      store.get("NetworkStakerBalanceCheckpoint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalStakerETHActivelyStaking(): BigInt {
    let value = this.get("totalStakerETHActivelyStaking");
    return value!.toBigInt();
  }

  set totalStakerETHActivelyStaking(value: BigInt) {
    this.set("totalStakerETHActivelyStaking", Value.fromBigInt(value));
  }

  get totalStakerETHWaitingInDepositPool(): BigInt {
    let value = this.get("totalStakerETHWaitingInDepositPool");
    return value!.toBigInt();
  }

  set totalStakerETHWaitingInDepositPool(value: BigInt) {
    this.set("totalStakerETHWaitingInDepositPool", Value.fromBigInt(value));
  }

  get totalStakerETHInRocketEthContract(): BigInt {
    let value = this.get("totalStakerETHInRocketEthContract");
    return value!.toBigInt();
  }

  set totalStakerETHInRocketEthContract(value: BigInt) {
    this.set("totalStakerETHInRocketEthContract", Value.fromBigInt(value));
  }

  get totalStakerETHInPendingOrExitedMinipools(): BigInt {
    let value = this.get("totalStakerETHInPendingOrExitedMinipools");
    return value!.toBigInt();
  }

  set totalStakerETHInPendingOrExitedMinipools(value: BigInt) {
    this.set(
      "totalStakerETHInPendingOrExitedMinipools",
      Value.fromBigInt(value)
    );
  }

  get totalStakerETHInProtocol(): BigInt {
    let value = this.get("totalStakerETHInProtocol");
    return value!.toBigInt();
  }

  set totalStakerETHInProtocol(value: BigInt) {
    this.set("totalStakerETHInProtocol", Value.fromBigInt(value));
  }

  get totalStakerETHRewardsSincePreviousCheckpoint(): BigInt {
    let value = this.get("totalStakerETHRewardsSincePreviousCheckpoint");
    return value!.toBigInt();
  }

  set totalStakerETHRewardsSincePreviousCheckpoint(value: BigInt) {
    this.set(
      "totalStakerETHRewardsSincePreviousCheckpoint",
      Value.fromBigInt(value)
    );
  }

  get totalStakersWithETHRewardsSincePreviousCheckpoint(): BigInt | null {
    let value = this.get("totalStakersWithETHRewardsSincePreviousCheckpoint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalStakersWithETHRewardsSincePreviousCheckpoint(value: BigInt | null) {
    if (!value) {
      this.unset("totalStakersWithETHRewardsSincePreviousCheckpoint");
    } else {
      this.set(
        "totalStakersWithETHRewardsSincePreviousCheckpoint",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get averageStakerETHRewardsSincePreviousCheckpoint(): BigInt | null {
    let value = this.get("averageStakerETHRewardsSincePreviousCheckpoint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averageStakerETHRewardsSincePreviousCheckpoint(value: BigInt | null) {
    if (!value) {
      this.unset("averageStakerETHRewardsSincePreviousCheckpoint");
    } else {
      this.set(
        "averageStakerETHRewardsSincePreviousCheckpoint",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get totalStakerETHRewardsUpToThisCheckpoint(): BigInt {
    let value = this.get("totalStakerETHRewardsUpToThisCheckpoint");
    return value!.toBigInt();
  }

  set totalStakerETHRewardsUpToThisCheckpoint(value: BigInt) {
    this.set(
      "totalStakerETHRewardsUpToThisCheckpoint",
      Value.fromBigInt(value)
    );
  }

  get totalStakersWithETHRewardsUpToThisCheckpoint(): BigInt | null {
    let value = this.get("totalStakersWithETHRewardsUpToThisCheckpoint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalStakersWithETHRewardsUpToThisCheckpoint(value: BigInt | null) {
    if (!value) {
      this.unset("totalStakersWithETHRewardsUpToThisCheckpoint");
    } else {
      this.set(
        "totalStakersWithETHRewardsUpToThisCheckpoint",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get totalStakerCheckpointsWithETHRewardsUpToThisCheckpoint(): BigInt | null {
    let value = this.get(
      "totalStakerCheckpointsWithETHRewardsUpToThisCheckpoint"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalStakerCheckpointsWithETHRewardsUpToThisCheckpoint(
    value: BigInt | null
  ) {
    if (!value) {
      this.unset("totalStakerCheckpointsWithETHRewardsUpToThisCheckpoint");
    } else {
      this.set(
        "totalStakerCheckpointsWithETHRewardsUpToThisCheckpoint",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get averageCheckpointsWithETHRewardsPerStaker(): BigInt | null {
    let value = this.get("averageCheckpointsWithETHRewardsPerStaker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averageCheckpointsWithETHRewardsPerStaker(value: BigInt | null) {
    if (!value) {
      this.unset("averageCheckpointsWithETHRewardsPerStaker");
    } else {
      this.set(
        "averageCheckpointsWithETHRewardsPerStaker",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get averageStakerETHRewardsPerCheckpointWithETHRewards(): BigInt | null {
    let value = this.get("averageStakerETHRewardsPerCheckpointWithETHRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averageStakerETHRewardsPerCheckpointWithETHRewards(value: BigInt | null) {
    if (!value) {
      this.unset("averageStakerETHRewardsPerCheckpointWithETHRewards");
    } else {
      this.set(
        "averageStakerETHRewardsPerCheckpointWithETHRewards",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get totalStakersWithAnRETHBalance(): BigInt {
    let value = this.get("totalStakersWithAnRETHBalance");
    return value!.toBigInt();
  }

  set totalStakersWithAnRETHBalance(value: BigInt) {
    this.set("totalStakersWithAnRETHBalance", Value.fromBigInt(value));
  }

  get totalRETHSupply(): BigInt {
    let value = this.get("totalRETHSupply");
    return value!.toBigInt();
  }

  set totalRETHSupply(value: BigInt) {
    this.set("totalRETHSupply", Value.fromBigInt(value));
  }

  get rETHExchangeRate(): BigInt {
    let value = this.get("rETHExchangeRate");
    return value!.toBigInt();
  }

  set rETHExchangeRate(value: BigInt) {
    this.set("rETHExchangeRate", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class StakerBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("stakerId", Value.fromString(""));
    this.set("networkStakerBalanceCheckpointId", Value.fromString(""));
    this.set("ethBalance", Value.fromBigInt(BigInt.zero()));
    this.set("rETHBalance", Value.fromBigInt(BigInt.zero()));
    this.set(
      "ethRewardsSincePreviousCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set(
      "totalETHRewardsUpToThisCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StakerBalanceCheckpoint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakerBalanceCheckpoint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakerBalanceCheckpoint", id.toString(), this);
    }
  }

  static load(id: string): StakerBalanceCheckpoint | null {
    return changetype<StakerBalanceCheckpoint | null>(
      store.get("StakerBalanceCheckpoint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakerId(): string {
    let value = this.get("stakerId");
    return value!.toString();
  }

  set stakerId(value: string) {
    this.set("stakerId", Value.fromString(value));
  }

  get networkStakerBalanceCheckpointId(): string {
    let value = this.get("networkStakerBalanceCheckpointId");
    return value!.toString();
  }

  set networkStakerBalanceCheckpointId(value: string) {
    this.set("networkStakerBalanceCheckpointId", Value.fromString(value));
  }

  get ethBalance(): BigInt {
    let value = this.get("ethBalance");
    return value!.toBigInt();
  }

  set ethBalance(value: BigInt) {
    this.set("ethBalance", Value.fromBigInt(value));
  }

  get rETHBalance(): BigInt {
    let value = this.get("rETHBalance");
    return value!.toBigInt();
  }

  set rETHBalance(value: BigInt) {
    this.set("rETHBalance", Value.fromBigInt(value));
  }

  get ethRewardsSincePreviousCheckpoint(): BigInt {
    let value = this.get("ethRewardsSincePreviousCheckpoint");
    return value!.toBigInt();
  }

  set ethRewardsSincePreviousCheckpoint(value: BigInt) {
    this.set("ethRewardsSincePreviousCheckpoint", Value.fromBigInt(value));
  }

  get totalETHRewardsUpToThisCheckpoint(): BigInt {
    let value = this.get("totalETHRewardsUpToThisCheckpoint");
    return value!.toBigInt();
  }

  set totalETHRewardsUpToThisCheckpoint(value: BigInt) {
    this.set("totalETHRewardsUpToThisCheckpoint", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class NetworkNodeTimezone extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalNodes", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NetworkNodeTimezone entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NetworkNodeTimezone entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NetworkNodeTimezone", id.toString(), this);
    }
  }

  static load(id: string): NetworkNodeTimezone | null {
    return changetype<NetworkNodeTimezone | null>(
      store.get("NetworkNodeTimezone", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalNodes(): BigInt {
    let value = this.get("totalNodes");
    return value!.toBigInt();
  }

  set totalNodes(value: BigInt) {
    this.set("totalNodes", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class Node extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timezone", Value.fromString(""));
    this.set("totalRPLStaked", Value.fromBigInt(BigInt.zero()));
    this.set("totalEffectiveRPLStaked", Value.fromBigInt(BigInt.zero()));
    this.set("totalClaimedRPLRewards", Value.fromBigInt(BigInt.zero()));
    this.set(
      "claimedRPLRewardsSinceLastCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("minimumRPLStake", Value.fromBigInt(BigInt.zero()));
    this.set("maximumRPLStake", Value.fromBigInt(BigInt.zero()));
    this.set("totalQueuedBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalQueuedUnbondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalStakingBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalStakingUnbondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalFinalizedBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalFinalizedUnbondedMinipools",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Node entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Node entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Node", id.toString(), this);
    }
  }

  static load(id: string): Node | null {
    return changetype<Node | null>(store.get("Node", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timezone(): string {
    let value = this.get("timezone");
    return value!.toString();
  }

  set timezone(value: string) {
    this.set("timezone", Value.fromString(value));
  }

  get totalRPLStaked(): BigInt {
    let value = this.get("totalRPLStaked");
    return value!.toBigInt();
  }

  set totalRPLStaked(value: BigInt) {
    this.set("totalRPLStaked", Value.fromBigInt(value));
  }

  get totalEffectiveRPLStaked(): BigInt {
    let value = this.get("totalEffectiveRPLStaked");
    return value!.toBigInt();
  }

  set totalEffectiveRPLStaked(value: BigInt) {
    this.set("totalEffectiveRPLStaked", Value.fromBigInt(value));
  }

  get totalClaimedRPLRewards(): BigInt {
    let value = this.get("totalClaimedRPLRewards");
    return value!.toBigInt();
  }

  set totalClaimedRPLRewards(value: BigInt) {
    this.set("totalClaimedRPLRewards", Value.fromBigInt(value));
  }

  get claimedRPLRewardsSinceLastCheckpoint(): BigInt {
    let value = this.get("claimedRPLRewardsSinceLastCheckpoint");
    return value!.toBigInt();
  }

  set claimedRPLRewardsSinceLastCheckpoint(value: BigInt) {
    this.set("claimedRPLRewardsSinceLastCheckpoint", Value.fromBigInt(value));
  }

  get minimumRPLStake(): BigInt {
    let value = this.get("minimumRPLStake");
    return value!.toBigInt();
  }

  set minimumRPLStake(value: BigInt) {
    this.set("minimumRPLStake", Value.fromBigInt(value));
  }

  get maximumRPLStake(): BigInt {
    let value = this.get("maximumRPLStake");
    return value!.toBigInt();
  }

  set maximumRPLStake(value: BigInt) {
    this.set("maximumRPLStake", Value.fromBigInt(value));
  }

  get totalQueuedBondedMinipools(): BigInt {
    let value = this.get("totalQueuedBondedMinipools");
    return value!.toBigInt();
  }

  set totalQueuedBondedMinipools(value: BigInt) {
    this.set("totalQueuedBondedMinipools", Value.fromBigInt(value));
  }

  get totalQueuedUnbondedMinipools(): BigInt {
    let value = this.get("totalQueuedUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalQueuedUnbondedMinipools(value: BigInt) {
    this.set("totalQueuedUnbondedMinipools", Value.fromBigInt(value));
  }

  get totalStakingBondedMinipools(): BigInt {
    let value = this.get("totalStakingBondedMinipools");
    return value!.toBigInt();
  }

  set totalStakingBondedMinipools(value: BigInt) {
    this.set("totalStakingBondedMinipools", Value.fromBigInt(value));
  }

  get totalStakingUnbondedMinipools(): BigInt {
    let value = this.get("totalStakingUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalStakingUnbondedMinipools(value: BigInt) {
    this.set("totalStakingUnbondedMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedBondedMinipools(): BigInt {
    let value = this.get("totalFinalizedBondedMinipools");
    return value!.toBigInt();
  }

  set totalFinalizedBondedMinipools(value: BigInt) {
    this.set("totalFinalizedBondedMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedUnbondedMinipools(): BigInt {
    let value = this.get("totalFinalizedUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalFinalizedUnbondedMinipools(value: BigInt) {
    this.set("totalFinalizedUnbondedMinipools", Value.fromBigInt(value));
  }

  get averageMinipoolFee(): BigInt | null {
    let value = this.get("averageMinipoolFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averageMinipoolFee(value: BigInt | null) {
    if (!value) {
      this.unset("averageMinipoolFee");
    } else {
      this.set("averageMinipoolFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastNodeBalanceCheckpoint(): string | null {
    let value = this.get("lastNodeBalanceCheckpoint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastNodeBalanceCheckpoint(value: string | null) {
    if (!value) {
      this.unset("lastNodeBalanceCheckpoint");
    } else {
      this.set("lastNodeBalanceCheckpoint", Value.fromString(<string>value));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class NetworkNodeBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalNodes", Value.fromBigInt(BigInt.zero()));
    this.set("totalRPLStaked", Value.fromBigInt(BigInt.zero()));
    this.set("totalEffectiveRPLStaked", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalClaimedRPLRewardsUpToThisCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set(
      "claimedRPLRewardsSinceLastCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("rplPriceInETH", Value.fromBigInt(BigInt.zero()));
    this.set("totalQueuedBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalQueuedUnbondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalStakingBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalStakingUnbondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalFinalizedBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalFinalizedUnbondedMinipools",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NetworkNodeBalanceCheckpoint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NetworkNodeBalanceCheckpoint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NetworkNodeBalanceCheckpoint", id.toString(), this);
    }
  }

  static load(id: string): NetworkNodeBalanceCheckpoint | null {
    return changetype<NetworkNodeBalanceCheckpoint | null>(
      store.get("NetworkNodeBalanceCheckpoint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalNodes(): BigInt {
    let value = this.get("totalNodes");
    return value!.toBigInt();
  }

  set totalNodes(value: BigInt) {
    this.set("totalNodes", Value.fromBigInt(value));
  }

  get totalRPLStaked(): BigInt {
    let value = this.get("totalRPLStaked");
    return value!.toBigInt();
  }

  set totalRPLStaked(value: BigInt) {
    this.set("totalRPLStaked", Value.fromBigInt(value));
  }

  get totalEffectiveRPLStaked(): BigInt {
    let value = this.get("totalEffectiveRPLStaked");
    return value!.toBigInt();
  }

  set totalEffectiveRPLStaked(value: BigInt) {
    this.set("totalEffectiveRPLStaked", Value.fromBigInt(value));
  }

  get totalClaimedRPLRewardsUpToThisCheckpoint(): BigInt {
    let value = this.get("totalClaimedRPLRewardsUpToThisCheckpoint");
    return value!.toBigInt();
  }

  set totalClaimedRPLRewardsUpToThisCheckpoint(value: BigInt) {
    this.set(
      "totalClaimedRPLRewardsUpToThisCheckpoint",
      Value.fromBigInt(value)
    );
  }

  get claimedRPLRewardsSinceLastCheckpoint(): BigInt {
    let value = this.get("claimedRPLRewardsSinceLastCheckpoint");
    return value!.toBigInt();
  }

  set claimedRPLRewardsSinceLastCheckpoint(value: BigInt) {
    this.set("claimedRPLRewardsSinceLastCheckpoint", Value.fromBigInt(value));
  }

  get rplPriceInETH(): BigInt {
    let value = this.get("rplPriceInETH");
    return value!.toBigInt();
  }

  set rplPriceInETH(value: BigInt) {
    this.set("rplPriceInETH", Value.fromBigInt(value));
  }

  get totalQueuedBondedMinipools(): BigInt {
    let value = this.get("totalQueuedBondedMinipools");
    return value!.toBigInt();
  }

  set totalQueuedBondedMinipools(value: BigInt) {
    this.set("totalQueuedBondedMinipools", Value.fromBigInt(value));
  }

  get totalQueuedUnbondedMinipools(): BigInt {
    let value = this.get("totalQueuedUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalQueuedUnbondedMinipools(value: BigInt) {
    this.set("totalQueuedUnbondedMinipools", Value.fromBigInt(value));
  }

  get totalStakingBondedMinipools(): BigInt {
    let value = this.get("totalStakingBondedMinipools");
    return value!.toBigInt();
  }

  set totalStakingBondedMinipools(value: BigInt) {
    this.set("totalStakingBondedMinipools", Value.fromBigInt(value));
  }

  get totalStakingUnbondedMinipools(): BigInt {
    let value = this.get("totalStakingUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalStakingUnbondedMinipools(value: BigInt) {
    this.set("totalStakingUnbondedMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedBondedMinipools(): BigInt {
    let value = this.get("totalFinalizedBondedMinipools");
    return value!.toBigInt();
  }

  set totalFinalizedBondedMinipools(value: BigInt) {
    this.set("totalFinalizedBondedMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedUnbondedMinipools(): BigInt {
    let value = this.get("totalFinalizedUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalFinalizedUnbondedMinipools(value: BigInt) {
    this.set("totalFinalizedUnbondedMinipools", Value.fromBigInt(value));
  }

  get averageMinipoolFee(): BigInt | null {
    let value = this.get("averageMinipoolFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averageMinipoolFee(value: BigInt | null) {
    if (!value) {
      this.unset("averageMinipoolFee");
    } else {
      this.set("averageMinipoolFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}

export class NodeBalanceCheckpoint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("Node", Value.fromString(""));
    this.set("NetworkNodeBalanceCheckpoint", Value.fromString(""));
    this.set("totalRPLStaked", Value.fromBigInt(BigInt.zero()));
    this.set("totalEffectiveRPLStaked", Value.fromBigInt(BigInt.zero()));
    this.set("totalClaimedRPLRewards", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalClaimedRPLRewardsUpToThisCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set(
      "claimedRPLRewardsSinceLastCheckpoint",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("minimumRPLStake", Value.fromBigInt(BigInt.zero()));
    this.set("maximumRPLStake", Value.fromBigInt(BigInt.zero()));
    this.set("totalQueuedBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalQueuedUnbondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalStakingBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalStakingUnbondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set("totalFinalizedBondedMinipools", Value.fromBigInt(BigInt.zero()));
    this.set(
      "totalFinalizedUnbondedMinipools",
      Value.fromBigInt(BigInt.zero())
    );
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("blockTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NodeBalanceCheckpoint entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NodeBalanceCheckpoint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NodeBalanceCheckpoint", id.toString(), this);
    }
  }

  static load(id: string): NodeBalanceCheckpoint | null {
    return changetype<NodeBalanceCheckpoint | null>(
      store.get("NodeBalanceCheckpoint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Node(): string {
    let value = this.get("Node");
    return value!.toString();
  }

  set Node(value: string) {
    this.set("Node", Value.fromString(value));
  }

  get NetworkNodeBalanceCheckpoint(): string {
    let value = this.get("NetworkNodeBalanceCheckpoint");
    return value!.toString();
  }

  set NetworkNodeBalanceCheckpoint(value: string) {
    this.set("NetworkNodeBalanceCheckpoint", Value.fromString(value));
  }

  get totalRPLStaked(): BigInt {
    let value = this.get("totalRPLStaked");
    return value!.toBigInt();
  }

  set totalRPLStaked(value: BigInt) {
    this.set("totalRPLStaked", Value.fromBigInt(value));
  }

  get totalEffectiveRPLStaked(): BigInt {
    let value = this.get("totalEffectiveRPLStaked");
    return value!.toBigInt();
  }

  set totalEffectiveRPLStaked(value: BigInt) {
    this.set("totalEffectiveRPLStaked", Value.fromBigInt(value));
  }

  get totalClaimedRPLRewards(): BigInt {
    let value = this.get("totalClaimedRPLRewards");
    return value!.toBigInt();
  }

  set totalClaimedRPLRewards(value: BigInt) {
    this.set("totalClaimedRPLRewards", Value.fromBigInt(value));
  }

  get totalClaimedRPLRewardsUpToThisCheckpoint(): BigInt {
    let value = this.get("totalClaimedRPLRewardsUpToThisCheckpoint");
    return value!.toBigInt();
  }

  set totalClaimedRPLRewardsUpToThisCheckpoint(value: BigInt) {
    this.set(
      "totalClaimedRPLRewardsUpToThisCheckpoint",
      Value.fromBigInt(value)
    );
  }

  get claimedRPLRewardsSinceLastCheckpoint(): BigInt {
    let value = this.get("claimedRPLRewardsSinceLastCheckpoint");
    return value!.toBigInt();
  }

  set claimedRPLRewardsSinceLastCheckpoint(value: BigInt) {
    this.set("claimedRPLRewardsSinceLastCheckpoint", Value.fromBigInt(value));
  }

  get minimumRPLStake(): BigInt {
    let value = this.get("minimumRPLStake");
    return value!.toBigInt();
  }

  set minimumRPLStake(value: BigInt) {
    this.set("minimumRPLStake", Value.fromBigInt(value));
  }

  get maximumRPLStake(): BigInt {
    let value = this.get("maximumRPLStake");
    return value!.toBigInt();
  }

  set maximumRPLStake(value: BigInt) {
    this.set("maximumRPLStake", Value.fromBigInt(value));
  }

  get totalQueuedBondedMinipools(): BigInt {
    let value = this.get("totalQueuedBondedMinipools");
    return value!.toBigInt();
  }

  set totalQueuedBondedMinipools(value: BigInt) {
    this.set("totalQueuedBondedMinipools", Value.fromBigInt(value));
  }

  get totalQueuedUnbondedMinipools(): BigInt {
    let value = this.get("totalQueuedUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalQueuedUnbondedMinipools(value: BigInt) {
    this.set("totalQueuedUnbondedMinipools", Value.fromBigInt(value));
  }

  get totalStakingBondedMinipools(): BigInt {
    let value = this.get("totalStakingBondedMinipools");
    return value!.toBigInt();
  }

  set totalStakingBondedMinipools(value: BigInt) {
    this.set("totalStakingBondedMinipools", Value.fromBigInt(value));
  }

  get totalStakingUnbondedMinipools(): BigInt {
    let value = this.get("totalStakingUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalStakingUnbondedMinipools(value: BigInt) {
    this.set("totalStakingUnbondedMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedBondedMinipools(): BigInt {
    let value = this.get("totalFinalizedBondedMinipools");
    return value!.toBigInt();
  }

  set totalFinalizedBondedMinipools(value: BigInt) {
    this.set("totalFinalizedBondedMinipools", Value.fromBigInt(value));
  }

  get totalFinalizedUnbondedMinipools(): BigInt {
    let value = this.get("totalFinalizedUnbondedMinipools");
    return value!.toBigInt();
  }

  set totalFinalizedUnbondedMinipools(value: BigInt) {
    this.set("totalFinalizedUnbondedMinipools", Value.fromBigInt(value));
  }

  get averageMinipoolFee(): BigInt | null {
    let value = this.get("averageMinipoolFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set averageMinipoolFee(value: BigInt | null) {
    if (!value) {
      this.unset("averageMinipoolFee");
    } else {
      this.set("averageMinipoolFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get blockTime(): BigInt {
    let value = this.get("blockTime");
    return value!.toBigInt();
  }

  set blockTime(value: BigInt) {
    this.set("blockTime", Value.fromBigInt(value));
  }
}
