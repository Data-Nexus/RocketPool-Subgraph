// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RPLTokensClaimed extends ethereum.Event {
  get params(): RPLTokensClaimed__Params {
    return new RPLTokensClaimed__Params(this);
  }
}

export class RPLTokensClaimed__Params {
  _event: RPLTokensClaimed;

  constructor(event: RPLTokensClaimed) {
    this._event = event;
  }

  get claimingContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimingAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class rocketRewardsPool extends ethereum.SmartContract {
  static bind(address: Address): rocketRewardsPool {
    return new rocketRewardsPool("rocketRewardsPool", address);
  }

  getClaimAmount(
    _claimingContract: string,
    _claimerAddress: Address,
    _claimerAmountPerc: BigInt
  ): BigInt {
    let result = super.call(
      "getClaimAmount",
      "getClaimAmount(string,address,uint256):(uint256)",
      [
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress),
        ethereum.Value.fromUnsignedBigInt(_claimerAmountPerc)
      ]
    );

    return result[0].toBigInt();
  }

  try_getClaimAmount(
    _claimingContract: string,
    _claimerAddress: Address,
    _claimerAmountPerc: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimAmount",
      "getClaimAmount(string,address,uint256):(uint256)",
      [
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress),
        ethereum.Value.fromUnsignedBigInt(_claimerAmountPerc)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimIntervalRewardsTotal(): BigInt {
    let result = super.call(
      "getClaimIntervalRewardsTotal",
      "getClaimIntervalRewardsTotal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getClaimIntervalRewardsTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimIntervalRewardsTotal",
      "getClaimIntervalRewardsTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimIntervalTime(): BigInt {
    let result = super.call(
      "getClaimIntervalTime",
      "getClaimIntervalTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getClaimIntervalTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimIntervalTime",
      "getClaimIntervalTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimIntervalTimeStart(): BigInt {
    let result = super.call(
      "getClaimIntervalTimeStart",
      "getClaimIntervalTimeStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getClaimIntervalTimeStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimIntervalTimeStart",
      "getClaimIntervalTimeStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimIntervalTimeStartComputed(): BigInt {
    let result = super.call(
      "getClaimIntervalTimeStartComputed",
      "getClaimIntervalTimeStartComputed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getClaimIntervalTimeStartComputed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimIntervalTimeStartComputed",
      "getClaimIntervalTimeStartComputed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimIntervalsPassed(): BigInt {
    let result = super.call(
      "getClaimIntervalsPassed",
      "getClaimIntervalsPassed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getClaimIntervalsPassed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimIntervalsPassed",
      "getClaimIntervalsPassed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimTimeLastMade(): BigInt {
    let result = super.call(
      "getClaimTimeLastMade",
      "getClaimTimeLastMade():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getClaimTimeLastMade(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimTimeLastMade",
      "getClaimTimeLastMade():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimingContractAllowance(_claimingContract: string): BigInt {
    let result = super.call(
      "getClaimingContractAllowance",
      "getClaimingContractAllowance(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );

    return result[0].toBigInt();
  }

  try_getClaimingContractAllowance(
    _claimingContract: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimingContractAllowance",
      "getClaimingContractAllowance(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimingContractEnabled(_contractName: string): boolean {
    let result = super.call(
      "getClaimingContractEnabled",
      "getClaimingContractEnabled(string):(bool)",
      [ethereum.Value.fromString(_contractName)]
    );

    return result[0].toBoolean();
  }

  try_getClaimingContractEnabled(
    _contractName: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getClaimingContractEnabled",
      "getClaimingContractEnabled(string):(bool)",
      [ethereum.Value.fromString(_contractName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClaimingContractExists(_contractName: string): boolean {
    let result = super.call(
      "getClaimingContractExists",
      "getClaimingContractExists(string):(bool)",
      [ethereum.Value.fromString(_contractName)]
    );

    return result[0].toBoolean();
  }

  try_getClaimingContractExists(
    _contractName: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getClaimingContractExists",
      "getClaimingContractExists(string):(bool)",
      [ethereum.Value.fromString(_contractName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClaimingContractPerc(_claimingContract: string): BigInt {
    let result = super.call(
      "getClaimingContractPerc",
      "getClaimingContractPerc(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );

    return result[0].toBigInt();
  }

  try_getClaimingContractPerc(
    _claimingContract: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimingContractPerc",
      "getClaimingContractPerc(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimingContractPercLast(_claimingContract: string): BigInt {
    let result = super.call(
      "getClaimingContractPercLast",
      "getClaimingContractPercLast(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );

    return result[0].toBigInt();
  }

  try_getClaimingContractPercLast(
    _claimingContract: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimingContractPercLast",
      "getClaimingContractPercLast(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimingContractTotalClaimed(_claimingContract: string): BigInt {
    let result = super.call(
      "getClaimingContractTotalClaimed",
      "getClaimingContractTotalClaimed(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );

    return result[0].toBigInt();
  }

  try_getClaimingContractTotalClaimed(
    _claimingContract: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimingContractTotalClaimed",
      "getClaimingContractTotalClaimed(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimingContractUserCanClaim(
    _claimingContract: string,
    _claimerAddress: Address
  ): boolean {
    let result = super.call(
      "getClaimingContractUserCanClaim",
      "getClaimingContractUserCanClaim(string,address):(bool)",
      [
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_getClaimingContractUserCanClaim(
    _claimingContract: string,
    _claimerAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getClaimingContractUserCanClaim",
      "getClaimingContractUserCanClaim(string,address):(bool)",
      [
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClaimingContractUserHasClaimed(
    _claimIntervalStartTime: BigInt,
    _claimingContract: string,
    _claimerAddress: Address
  ): boolean {
    let result = super.call(
      "getClaimingContractUserHasClaimed",
      "getClaimingContractUserHasClaimed(uint256,string,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_claimIntervalStartTime),
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_getClaimingContractUserHasClaimed(
    _claimIntervalStartTime: BigInt,
    _claimingContract: string,
    _claimerAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getClaimingContractUserHasClaimed",
      "getClaimingContractUserHasClaimed(uint256,string,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_claimIntervalStartTime),
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClaimingContractUserRegisteredTime(
    _claimingContract: string,
    _claimerAddress: Address
  ): BigInt {
    let result = super.call(
      "getClaimingContractUserRegisteredTime",
      "getClaimingContractUserRegisteredTime(string,address):(uint256)",
      [
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getClaimingContractUserRegisteredTime(
    _claimingContract: string,
    _claimerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimingContractUserRegisteredTime",
      "getClaimingContractUserRegisteredTime(string,address):(uint256)",
      [
        ethereum.Value.fromString(_claimingContract),
        ethereum.Value.fromAddress(_claimerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimingContractUserTotalCurrent(_claimingContract: string): BigInt {
    let result = super.call(
      "getClaimingContractUserTotalCurrent",
      "getClaimingContractUserTotalCurrent(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );

    return result[0].toBigInt();
  }

  try_getClaimingContractUserTotalCurrent(
    _claimingContract: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimingContractUserTotalCurrent",
      "getClaimingContractUserTotalCurrent(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimingContractUserTotalNext(_claimingContract: string): BigInt {
    let result = super.call(
      "getClaimingContractUserTotalNext",
      "getClaimingContractUserTotalNext(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );

    return result[0].toBigInt();
  }

  try_getClaimingContractUserTotalNext(
    _claimingContract: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimingContractUserTotalNext",
      "getClaimingContractUserTotalNext(string):(uint256)",
      [ethereum.Value.fromString(_claimingContract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRPLBalance(): BigInt {
    let result = super.call("getRPLBalance", "getRPLBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRPLBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRPLBalance",
      "getRPLBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): i32 {
    let result = super.call("version", "version():(uint8)", []);

    return result[0].toI32();
  }

  try_version(): ethereum.CallResult<i32> {
    let result = super.tryCall("version", "version():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rocketStorageAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _claimerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _claimerAmountPerc(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class RegisterClaimerCall extends ethereum.Call {
  get inputs(): RegisterClaimerCall__Inputs {
    return new RegisterClaimerCall__Inputs(this);
  }

  get outputs(): RegisterClaimerCall__Outputs {
    return new RegisterClaimerCall__Outputs(this);
  }
}

export class RegisterClaimerCall__Inputs {
  _call: RegisterClaimerCall;

  constructor(call: RegisterClaimerCall) {
    this._call = call;
  }

  get _claimerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RegisterClaimerCall__Outputs {
  _call: RegisterClaimerCall;

  constructor(call: RegisterClaimerCall) {
    this._call = call;
  }
}
